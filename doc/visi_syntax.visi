intro1.visi

(ns visi.notebook
  (:require [visi.runtime :as v]))

source info = "https://github.com/deanwampler/spark-workshop/raw/master/data/kjvdat.txt"

lower = .cache(info |> map .toLowerCase)

sins = lower |> filter # (.contains(it, "sin") && not(.contains(it, "sing")))

.count(sins)

sins

sins-plus-god-or-christ = sins |> filter # begin

println("Count: ", .count(sins-plus-god-or-christ))

(require '[visi.pkg])

(visi.pkg/build-jar)

--------------------------------------------------

plotty.visi

(ns natural-drylands
  (:require [gorilla-plot.core :as plot]
[visi.runtime :as v] [clojure.string :as s]))

build_set(str) = s/split-lines(str) >> | map(.trim) >> | filter(# 0 < count(it)) >> | remove(# .startsWith(it, "pos_words = "https://raw.githubusercontent.com/redmonk/bluebird/master/positive-words.txt" >> v/read_url >> build_set
neg_words = "https://raw.githubusercontent.com/redmonk/bluebird/master/negative-words.txt" >> v/read_url >> build_set

calc_sent(s) =
  calc(words, test) = filter(test, words) >> count
  cleaned = .replaceAll(s, "\\d", "") >> # .replaceAll(it, "\\p{Punct}", " ") >> .toLowerCase
  split = .split(cleaned, " ") >> | map(.trim)
  {:pos -> calc(split, pos_words), :neg -> calc(split, neg_words)}

twit = v/stream-into-watching((v/create-twitter-stream({:duration -> 5000})) |> map .getText |> map calc_sent |> filter # (1 < it.pos || 1 < it.neg) |> reduce | merge-with((+)))

plot/compose(plot/list-plot( map(:pos, twit), :joined, true, :color, :green , :plot-range, [:all, [-10, 50]]),
             plot/list-plot( map(:neg, twit), :joined, true, :color, :red ),
             plot/list-plot( map(# it.pos - it.neg, twit), :joined, true, :color, :blue ))

last(twit) >> # v/text-when(false && it.neg > it.pos, "+14158122394", str("It's negative! ", it))

--------------------------------------------------
pop-by-county.visi

(ns visi-explore
  (:require [gorilla-plot.core :as plot]
            [visi.runtime :as v]))

(v/setup-context)

(v/source cities "https://www.census.gov/geo/reference/codes/files/national_county.txt")

(v/source data "http://api.census.gov/data/2010/sf1?key=32cf68cf2c9b24d5b1d008664bbf805e63359d90&get=P0030001,P0030003&for=county:*&in=state:*")

(.count data)

(.first data)

(def fd (.first data))

(def d2 (let [zz (.first data)] (v/s-filter data (fn [x] (not (= x zz))))))

(.count d2
        )

(+ 34 4)

(.take d2 20)

(.take cities 15)

(def lookup (->> cities .collect rest (map (fn [[st a b c _]] [[a b] [st c]])) (into {}) ))

(get lookup ["01" "001"])

(def normalize (v/s-map d2 (fn [[p1 p2 st co]] {:locale (get lookup [st co]) :total (read-string p1) :white (read-string p2)})))

(plot/histogram (->> (.collect (.sample normalize false 1)) (map (fn [{:keys [total white]}] (/ white total)))))

--------------------------------------------------
good_bad.visi

(ns sunset-smokescreen
  (:require [gorilla-plot.core :as plot]
[visi.runtime :as v] [clojure.string :as s]))

good_words = v/read_url("https://raw.githubusercontent.com/redmonk/bluebird/master/positive-words.txt") >> s/split-lines >> # map(s/trim, it) >> # filter(# not(.startsWith(it, "

count(good_words)

bad_words = v/read_url("https://raw.githubusercontent.com/redmonk/bluebird/master/negative-words.txt") >> s/split-lines >> # map(s/trim, it) >> # filter(# not(.startsWith(it, "

sent(s) = s >> s/lower-case >> # .split(it, " ") >> # map(# .trim(it), it) >> # remove(# 0 == count(it), it) >> # {.pos -> it >> # filter(good_words, it) >> count, .neg -> it >> # filter(bad_words, it) >> count}

sent("foo bar baz good aloof")

bad_words("aloof")

"dog" >> .trim

map(.trim, [" a", "b"])

(s/split-lines "foo\nbar\n\n\nbaz")

--------------------------------------------------

harky.visi

(ns affectionate-spring
  (:require [gorilla-plot.core :as plot]
[visi.runtime :as v] [clojure.string :as s]))

1 + 1

dog = v/read_url("https://raw.githubusercontent.com/redmonk/bluebird/master/negative-words.txt") >> s/split-lines >> | filter(# count(it) > 0) >> | filter(# not(.startsWith(it, "

take( 20, dog)

sc = v/spark-context()

cat = .parallelize(sc, dog)

cat

 v/v-map(cat, # count(it))

v/v-map(cat, # .toUpperCase(it))

(require '[cemerick.pomegranate :as pom])

(pom/add-dependencies :coordinates '[[incanter "1.2.3"]]
                     :repositories (merge cemerick.pomegranate.aether/maven-central
                                          {"clojars" "http://clojars.org/repo"}))

(require '(incanter core stats charts))

--------------------------------------------------
wordcount2.visi

(ns visi-notebook
  (:require [visi.runtime :as v]))

source bible = "https://github.com/deanwampler/spark-workshop/raw/master/data/kjvdat.txt"

lower-bible = (bible |> map .toLowerCase) >> # .cache(it)

wc = (lower-bible |> mapcat # .split(it, "\\W+")) >> # v/v-map-to-pair(it, # [it, 1] ) >> # v/v-reduce-by-key(it, (+))

wc

sink wc2 = wc

wc2

--------------------------------------------------
yakky.visi

(ns divine-hurricane
  (:require [gorilla-plot.core :as plot]
[visi.runtime :as v]))

1 + 1

(def woof (.parallelize visi.runtime/$spark-context [{:a 1 :b 3} {:a 5 :b -1} {:a 0 :b 22}]))

woof

w2 <= z = woof
   z %% :c -> (z.b + 33)

w2

w3 ?= w2.b >= 0

w3

read-string("333")

(read-string "4444")

source cities = "https://www.census.gov/geo/reference/codes/files/national_county.txt"

cities

(def c3 (-> (.zipWithIndex cities) (v/s-filter (fn [[x n]] (> n 0))) (v/s-map first)))

c3

c2 <= x = c3

c2

c2

